
✅ Overview: Pages to Create
We'll create the following pages in your frontend/src/routes/ directory:

Route	File	Purpose
/	+page.svelte	Home page
/members	members/+page.svelte	List of IEI members
/academics	academics/+page.svelte	Academic programs/info
/gallery	gallery/+page.svelte	Photo gallery
/contact	contact/+page.svelte	Contact information

✅ Step 1: Setup SvelteKit App (if not done yet)
In terminal:

bash
Copy
Edit
cd E:\iei
npx sv create frontend
cd frontend
npm install
✅ Step 2: Run Svelte Dev Server
Run:

bash
Copy
Edit
npm run dev
Visit in your browser:

arduino
Copy
Edit
http://localhost:5173
✅ Step 3: Folder Structure of Pages
Create the following files inside src/routes/:

📄 src/routes/+page.svelte – Home Page
svelte
Copy
Edit
<h1 class="text-3xl font-bold text-blue-800 mb-4">Welcome to Institution of Engineers</h1>
<p class="text-lg">Explore Members, Academics, Photo Gallery, and more.</p>
👥 src/routes/members/+page.svelte
svelte
Copy
Edit
<script>
  import { onMount } from "svelte";
  let members = [];

  onMount(async () => {
    const res = await fetch("http://localhost:5000/api/members");
    members = await res.json();
  });
</script>

<h1 class="text-2xl font-bold mb-4">Our Esteemed Members</h1>
<ul class="space-y-2">
  {#each members as member}
    <li class="p-4 border bg-white rounded shadow">
      <strong>{member.name}</strong><br />
      <span>{member.designation}</span>
    </li>
  {/each}
</ul>
🎓 src/routes/academics/+page.svelte
svelte
Copy
Edit
<script>
  import { onMount } from "svelte";
  let academics = [];

  onMount(async () => {
    const res = await fetch("http://localhost:5000/api/academics");
    academics = await res.json();
  });
</script>

<h1 class="text-2xl font-bold mb-4">Academic Programs</h1>
<ul class="space-y-3">
  {#each academics as item}
    <li class="p-3 border bg-white rounded shadow">
      <h2 class="font-semibold">{item.title}</h2>
      <p>{item.description}</p>
    </li>
  {/each}
</ul>
🖼️ src/routes/gallery/+page.svelte
svelte
Copy
Edit
<script>
  import { onMount } from "svelte";
  let photos = [];

  onMount(async () => {
    const res = await fetch("http://localhost:5000/api/gallery");
    photos = await res.json();
  });
</script>

<h1 class="text-2xl font-bold mb-4">Photo Gallery</h1>

<div class="grid grid-cols-2 md:grid-cols-3 gap-4">
  {#each photos as photo}
    <div class="border p-2">
      <img src={photo.image_url} alt="gallery" class="w-full rounded shadow" />
      <p class="mt-1 text-center">{photo.caption}</p>
    </div>
  {/each}
</div>
📞 src/routes/contact/+page.svelte
svelte
Copy
Edit
<h1 class="text-2xl font-bold mb-4">Contact Us</h1>
<p class="mb-2">Institution of Engineers</p>
<p>Email: contact@iei.in</p>
<p>Phone: +91-1234567890</p>
<p>Address: IEI Building, Kolkata, India</p>
✅ Step 4: Add Navbar in +layout.svelte
Edit src/routes/+layout.svelte:

svelte
Copy
Edit
<script>
  import "../app.postcss";
</script>

<nav class="bg-blue-900 text-white p-4 flex justify-between">
  <div class="text-xl font-bold">Institution of Engineers</div>
  <div class="space-x-4">
    <a href="/" class="hover:underline">Home</a>
    <a href="/members" class="hover:underline">Members</a>
    <a href="/academics" class="hover:underline">Academics</a>
    <a href="/gallery" class="hover:underline">Gallery</a>
    <a href="/contact" class="hover:underline">Contact</a>
  </div>
</nav>

<main class="p-4">
  <slot />
</main>
✅ Step 5: Start Dev Server Again
Run:

bash
Copy
Edit
npm run dev
Open:

arduino
Copy
Edit
http://localhost:5173
Now you can click each menu to see separate pages.

🔜 Next Steps
Would you like to:

Add a floating virtual assistant (chatbot)?

Style the website with Tailwind cards, images, etc.?

Prepare deployment steps to Vercel (frontend) and Render (backend)?

Let me know!

Full Backend API Project Files (Node.js + Express + MySQL)
🔸 Folder Structure (in E:\institution-of-engineers\backend)
lua
Copy
Edit
backend/
├── config/
│   └── db.js
├── controllers/
│   └── memberController.js
├── routes/
│   └── memberRoutes.js
├── .env
├── package.json
└── server.js
🔹 A. server.js
js
Copy
Edit
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import memberRoutes from "./routes/memberRoutes.js";

dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());

app.use("/api/members", memberRoutes);

app.listen(5000, () => {
  console.log("Server running on http://localhost:5000");
});
🔹 B. config/db.js
js
Copy
Edit
import mysql from 'mysql2';
import dotenv from 'dotenv';
dotenv.config();

export const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});
🔹 C. .env
ini
Copy
Edit
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=yourpassword
DB_NAME=institution_db
Replace yourpassword with your actual MySQL root password.

🔹 D. routes/memberRoutes.js
js
Copy
Edit
import express from "express";
import { getMembers } from "../controllers/memberController.js";

const router = express.Router();
router.get("/", getMembers);
export default router;
🔹 E. controllers/memberController.js
js
Copy
Edit
import { db } from "../config/db.js";

export const getMembers = (req, res) => {
  db.query("SELECT * FROM members", (err, data) => {
    if (err) return res.status(500).json({ error: err });
    res.json(data);
  });
};
🔹 F. Install Dependencies
From the backend/ folder:

bash
Copy
Edit
npm init -y
npm install express mysql2 cors dotenv
If you want to use import instead of require, add this in package.json:

json
Copy
Edit
"type": "module"
🔹 G. Run the server
bash
Copy
Edit
node server.js
Output should say: Server running on http://localhost:5000

✅ 2. Basic Svelte Frontend Layout (SvelteKit + Tailwind CSS)
🔸 Folder Structure (frontend/)
arduino
Copy
Edit
frontend/
├── src/
│   ├── routes/
│   │   ├── +page.svelte        ← Home Page
│   │   └── members/+page.svelte ← Members Page
│   └── app.postcss
├── tailwind.config.cjs
├── postcss.config.cjs
└── svelte.config.js
🔹 A. Create SvelteKit App
bash
Copy
Edit
cd ../frontend
npm create svelte@latest .
# Choose Skeleton Project (no demo app)
npm install
🔹 B. Tailwind Setup
bash
Copy
Edit
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init tailwind.config.cjs -p
Update tailwind.config.cjs:
js
Copy
Edit
export default {
  content: ["./src/**/*.{html,js,svelte,ts}"],
  theme: {
    extend: {},
  },
  plugins: [],
}
Create src/app.postcss:
css
Copy
Edit
@tailwind base;
@tailwind components;
@tailwind utilities;
Update src/routes/+layout.svelte:
svelte
Copy
Edit
<script>
  import "../app.postcss";
</script>
<slot />
🔹 C. Add Members Page (src/routes/members/+page.svelte)
svelte
Copy
Edit
<script>
  import axios from 'axios';
  let members = [];

  axios.get("http://localhost:5000/api/members").then((res) => {
    members = res.data;
  });
</script>

<h1 class="text-2xl font-bold mb-4">Members</h1>
<ul>
  {#each members as m}
    <li class="border p-2 mb-2">{m.name} - {m.designation}</li>
  {/each}
</ul>
🔹 D. Run Svelte Dev Server
bash
Copy
Edit
npm run dev
Open browser at http://localhost:5173/members to view members from the MySQL database.

✅ 3. MySQL Setup & Test Data
🔹 A. Open MySQL CLI or Workbench
sql
Copy
Edit
CREATE DATABASE institution_db;
USE institution_db;

CREATE TABLE members (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  designation VARCHAR(100),
  image_url VARCHAR(255)
);

INSERT INTO members (name, designation, image_url)
VALUES 
('Dr. Ramesh Nayak', 'President', 'ramesh.jpg'),
('Ms. Anjana Patil', 'Vice President', 'anjana.jpg');
You can create similar tables for:

academics

gallery

committee_members

🧠 BONUS: Add Virtual Assistant (Chatbot UI)
A. Install Chat Popup in Svelte
Create a floating chat component in src/lib/ChatBot.svelte

svelte
Copy
Edit
<script>
  let messages = [];
  let input = "";

  const send = () => {
    messages.push({ from: "user", text: input });
    messages.push({ from: "bot", text: "Coming soon!" }); // Replace with API call
    input = "";
  };
</script>

<div class="fixed bottom-4 right-4 bg-white p-4 shadow-lg rounded-xl w-64">
  <div class="text-lg font-bold">Virtual Assistant</div>
  <div class="h-40 overflow-y-auto text-sm my-2">
    {#each messages as msg}
      <div class="{msg.from === 'bot' ? 'text-blue-500' : 'text-black'}">
        {msg.from === 'bot' ? '🤖' : '👤'}: {msg.text}
      </div>
    {/each}
  </div>
  <input bind:value={input} class="border w-full p-1 mb-1" placeholder="Ask something..." />
  <button on:click={send} class="bg-blue-600 text-white px-2 py-1 rounded">Send</button>
</div>
Add <ChatBot /> to any page.


Step 1: Folder Structure Setup
🔹 Directory Layout:
Create this structure in a location like E:\institution-of-engineers

bash
Copy
Edit
E:\institution-of-engineers
│
├── backend        ← Node.js + Express
├── frontend       ← SvelteKit App
└── database       ← SQL Scripts / Setup Notes
🛠️ Step 2: Backend (Node.js + Express + MySQL)
1. Initialize Backend:
bash
Copy
Edit
cd backend
npm init -y
npm install express mysql2 cors dotenv
2. Create folder structure:
bash
Copy
Edit
mkdir routes controllers models config
touch server.js
3. server.js (basic server setup):
js
Copy
Edit
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import memberRoutes from "./routes/memberRoutes.js";

dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());

app.use("/api/members", memberRoutes);

app.listen(5000, () => console.log("Server running on port 5000"));
4. .env (in /backend):
ini
Copy
Edit
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=yourpassword
DB_NAME=institution_db
5. config/db.js:
js
Copy
Edit
import mysql from 'mysql2';
import dotenv from 'dotenv';
dotenv.config();

export const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});
6. Example Members API:
routes/memberRoutes.js

js
Copy
Edit
import express from "express";
import { getMembers } from "../controllers/memberController.js";
const router = express.Router();

router.get("/", getMembers);
export default router;
controllers/memberController.js

js
Copy
Edit
import { db } from "../config/db.js";

export const getMembers = (req, res) => {
  db.query("SELECT * FROM members", (err, data) => {
    if (err) return res.status(500).json(err);
    res.json(data);
  });
};
🧠 Step 3: MySQL Setup
Example Tables:
sql
Copy
Edit
CREATE DATABASE institution_db;
USE institution_db;

CREATE TABLE members (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  designation VARCHAR(100),
  image_url VARCHAR(255)
);

CREATE TABLE academics (
  id INT AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(255),
  description TEXT
);

CREATE TABLE gallery (
  id INT AUTO_INCREMENT PRIMARY KEY,
  image_url VARCHAR(255),
  caption VARCHAR(255)
);
Add some test data for members, academics, and gallery.

🧑‍🎨 Step 4: Frontend (SvelteKit)
1. Create App:
bash
Copy
Edit
cd ../frontend
npm create svelte@latest .
# Choose Skeleton Project
npm install
npm install axios
2. Tailwind CSS Setup:
bash
Copy
Edit
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init tailwind.config.cjs -p
Update:

tailwind.config.cjs

js
Copy
Edit
content: ["./src/**/*.{html,js,svelte,ts}"],
src/app.postcss

css
Copy
Edit
@tailwind base;
@tailwind components;
@tailwind utilities;
In src/routes/+layout.svelte

svelte
Copy
Edit
<script>
  import "../app.postcss";
</script>
<slot />
3. Fetch Data Example:
svelte
Copy
Edit
<script>
  import axios from "axios";
  let members = [];

  axios.get("http://localhost:5000/api/members").then((res) => {
    members = res.data;
  });
</script>

<h2 class="text-xl font-bold">Members</h2>
<ul>
  {#each members as member}
    <li>{member.name} - {member.designation}</li>
  {/each}
</ul>
💬 Step 5: Add Virtual Assistant
Option A: Text Chatbot Using OpenAI API
Add a small chat popup using Svelte.

Integrate OpenAI or a custom model for answering common questions.

Install backend dependencies:

bash
Copy
Edit
npm install openai
Use a POST endpoint /api/chat that accepts a prompt and returns a response from OpenAI.

🌐 Step 6: Deployment
A. Deploy Backend
Use Render, Railway, or a VPS.

B. Deploy MySQL
Use:

Localhost (during dev)

Hosted MySQL on PlanetScale, ClearDB, or your VPS.

C. Deploy Frontend
Use Vercel or Netlify to host the Svelte frontend.

🎯 Final Features Summary
Pages:

Home

About IEI (History, Awards)

Committee Members (From MySQL)

Membership

Academics (Dynamic content)

IEI Local Centre

Activities (Photo gallery from DB)

Contact Us (static or dynamic form)

Virtual Assistant

Data: Stored and fetched from MySQL using Express backend API.

Would you like me to:

Generate the full backend API project files?

Create a basic Svelte frontend layout for you?

Help you deploy on a specific platform (e.g., Vercel + PlanetScale + Render)?

Let me know how far you’ve gone, and I’ll guide you from there.